name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - "*"
    tags:
      # normal versions
      - "v[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

jobs:
  build:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2.2.0
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

  # ===================

  # Runs unit tests on all supported combinations of node versions, OSes and JS-Controller
  unit-tests:
    if: contains(github.event.head_commit.message, '[skip ci]') == false

    needs: [build]

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        os: [ubuntu-latest, windows-latest, macos-latest]
        js-controller: [master] # git branches/commits/tags to test against

    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2.2.0
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: |
        npm ci
        npm i -g lerna
        lerna exec -- npm link

    - name: Clone JS-Controller
      run: |
        git clone https://github.com/ioBroker/ioBroker.js-controller
        cd ioBroker.js-controller
        git checkout ${{ matrix.js-controller }}

    - name: Install JS-Controller's dependencies
      # TODO: Determine the DB-dependencies automatically
      run: |
        cd ioBroker.js-controller
        npm i
        npm link @iobroker/db-objects-file
        npm link @iobroker/db-objects-redis
        npm link @iobroker/db-states-file
        npm link @iobroker/db-states-redis

    # JS-Controller tests need Redis to be installed
    - name: Install Redis (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        sudo add-apt-repository ppa:chris-lea/redis-server -y
        sudo apt-get update -q
        sudo apt-get install redis-server redis-sentinel -y
        sudo systemctl start redis-server
    - name: Install Redis (MacOS)
      if: ${{ matrix.os == 'macos-latest' }}
      run: |
        brew update
        brew install redis
        ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents
        launchctl load ~/Library/LaunchAgents/homebrew.mxcl.redis.plist
    - name: Install Redis (Windows)
      if: ${{ matrix.os == 'windows-latest' }}
      run: |
        choco install redis-64 --version 3.0.503
        powershell "Start-Process redis-server.exe -PassThru"

    - name: Run JS-Controller's Standard tests
      run: |
        cd ioBroker.js-controller
        npm run test
      env:
        CI: true

    - name: Install jsonl dependencies
      # TODO: Determine the DB-dependencies automatically
      run: |
        cd ioBroker.js-controller
        npm link @iobroker/db-objects-jsonl
        npm link @iobroker/db-states-jsonl

    - name: Run JS-Controller's Jsonl tests
      run: |
        cd ioBroker.js-controller
        npm run test-jsonl
      env:
        CI: true

    - name: Run JS-Controller's Redis Socket/Sentinel Tests (Linux)
      if: ${{ matrix.os == 'ubuntu-latest' }}
      run: |
        cd ioBroker.js-controller
        sudo chmod ogu+x test/redis-socket/setup-socket.sh
        sudo chmod ogu+x test/redis-sentinel/*.sh
        test/redis-socket/setup-socket.sh
        cd test/redis-sentinel
        ./test-sentinel.sh

  # ===================

  # Deploys the final package to NPM
  deploy:
    # Trigger this step only when a commit on any branch is tagged with a version number
    if: |
      contains(github.event.head_commit.message, '[skip ci]') == false &&
      github.event_name == 'push' &&
      startsWith(github.ref, 'refs/tags/v')

    needs: [unit-tests]

    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2.2.0
      with:
        node-version: ${{ matrix.node-version }}

    - name: Extract the version and commit body from the tag
      id: extract_release
      # The body may be multiline, therefore we need to escape some characters
      run: |
        VERSION="${{ github.ref }}"
        VERSION=${VERSION##*/}
        VERSION=${VERSION##*v}
        echo "::set-output name=VERSION::$VERSION"
        BODY=$(git show -s --format=%b)
        BODY="${BODY//'%'/'%25'}"
        BODY="${BODY//$'\n'/'%0A'}"
        BODY="${BODY//$'\r'/'%0D'}"
        echo "::set-output name=BODY::$BODY"

    - name: Install dependencies
      run: npm ci

    - name: Publish package to npm
      run: |
        npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
        npm whoami
        npx lerna publish from-package --yes

    - name: Create Github Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.extract_release.outputs.VERSION }}
        draft: false
        # Prerelease versions create prereleases on Github
        prerelease: ${{ contains(steps.extract_release.outputs.VERSION, '-') }}
        body: ${{ steps.extract_release.outputs.BODY }}
